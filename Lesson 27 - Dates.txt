In JS there's a date class and we can create objects out of it:

const moonDAy = new Date(1969, 6, 20); // 20th July 1969 //months start counting from 0

If we don't provide any parameter:

const now = new Date();

It will give you today's date

We can use methods associated to Date class to get ahold of specific components of the date:
now.getFullYear() //Current Year
now.getMonth() // Month (0 to 11)
now.getDate() // Day of the month
now.getDay() // Day of the week
now.getHours() // Current hour
now.getMinutes() // Curent minutes
now.getSeconds() // Current seconds

If there are getters then there are setters:
now.setFullYear(3000);
now.setMonth(21);
now.setDate(1);
now.setHours(12);
now.setMInutes(23);
now.setSeconds(45);

There's a built in method that allows us to get different formats of Date:

now.toLocaleDateString(); //Gives you the date in the format of your computer
now.toLocaleDateString("en-US"); Month/Day/Year

const options = { month: 'long', day: 'numeric'};
now.toLocaleDateString('en-US', options); //September 2

There's a method called now that will also give you today's date:

Date.now() // number of miliseconds since 1st Jan 1970 at 00:00 known as unix epoch date

We can also create a date using this method:
let anotherMillenium = new Date(946684800000); //1/1/2000

function format(date) {
  const year = date.getFullYear();
  const month = date.toLocaleDateString("en-US", {month: "long"});
  let day = date.getDate();
  
  if (day > 3 && day < 21){
    day += "th";
    return `${day} ${month} ${year}`;
  }
  
  switch (day % 10) {
    case 1: 
      day += "st";
      break;
    case 2:
      day += "nd";
      break;
    case 3:
      day += "rd";
      break;
  }
  return `${day} ${month} ${year}`;
}
